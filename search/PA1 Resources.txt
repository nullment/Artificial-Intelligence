https://www.geeksforgeeks.org/how-to-initialize-an-array-in-java/


Grid - A 2-dimensional array of objects backed by a list of lists.  Data is accessed
    via grid[x][y] where (x,y) are positions on a Pacman map with x horizontal,
    y vertical and the origin (0,0) in the bottom left corner.

AgentStates hold the state of an agent (configuration, speed, scared, etc).

  Actions-   A collection of static methods for manipulating move actions.

Util has Stack Queue PriorityQueue manhattanDistance will be used for this proj

python pacman.py -l tinyMaze -p SearchAgent -a fn=tinyMazeSearch
l = layout
p = pacman
a = algorithm

Q1 
Maybe can use a stack to continously push/pop until goal?

will need a tracker list and a list to house goal walk\

altered version of this implementation https://www.geeksforgeeks.org/iterative-depth-first-traversal/
check if stack is empty

dfs stack bfs queue

Q2
Using dfs code and changing implemented structure may work 

python pacman.py -l mediumMaze -p SearchAgent -a fn=bfs works

python pacman.py -l bigMaze -p SearchAgent -a fn=bfs -z .5


running into error where nodes are being expanded twice, will implement a check list using the queue, ideally should just be a single iteration

*** FAIL: test_cases\q2\graph_manypaths.test
***     graph:
***             B1          E1
***            ^  \        ^  \
***           /    V      /    V
***         *A --> C --> D --> F --> [G]
***           \    ^      \    ^
***            V  /        V  /
***             B2          E2
***
***         A is the start state, G is the goal.  Arrows mark
***         possible state transitions.  This graph has multiple
***         paths to the goal, where nodes with the same state
***         are added to the fringe multiple times before they
***         are expanded.
***     student solution:               ['1:A->C', '0:C->D', '1:D->F', '0:F->G']
***     student expanded_states:        ['A', 'B1', 'C', 'B2', 'C', 'D', 'D', 'E1', 'F', 'E2', 'E1', 'F', 'E2', 'F']
***
***     correct solution:               ['1:A->C', '0:C->D', '1:D->F', '0:F->G']
***     correct expanded_states:        ['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
***     correct rev_solution:           ['1:A->C', '0:C->D', '1:D->F', '0:F->G']
***     correct rev_expanded_states:    ['A', 'B2', 'C', 'B1', 'D', 'E2', 'F', 'E1']
*** FAIL: test_cases\q2\pacman_1.test
*** Too many node expanded; are you expanding nodes twice?
***     student nodes expanded: 275
***
***     correct nodes expanded: 269 (leewayFactor 1.0)


q3 djikstras

should be kinda similar to bfs but using utils priority queue

https://www.geeksforgeeks.org/priority-queue-class-in-java/  #run down on prio queue

need cost 

getCostOfActions() returns total cost of seq of actions

FAIL: test_cases\q3\graph_manypaths.test
***     graph:
***             B1          E1
***            ^  \        ^  \
***           /    V      /    V
***         *A --> C --> D --> F --> [G]
***           \    ^      \    ^
***            V  /        V  /
***             B2          E2
***
***         A is the start state, G is the goal.  Arrows mark
***         possible state transitions.  This graph has multiple
***         paths to the goal, where nodes with the same state
***         are added to the fringe multiple times before they
***         are expanded.
***     student solution:               ['1:A->C', '0:C->D', '1:D->F', '0:F->G']
***     student expanded_states:        ['A', 'B1', 'C', 'B2', 'C', 'D', 'D', 'E1', 'E1', 'F', 'F', 'E2', 'E2', 'F', 'F'] double expansion after first
***
***     correct solution:               ['1:A->C', '0:C->D', '1:D->F', '0:F->G']
***     correct expanded_states:        ['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
***     correct rev_solution:           ['1:A->C', '0:C->D', '1:D->F', '0:F->G']
***     correct rev_expanded_states:    ['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']

q4 a star

similar to djikstra, add heuristic function, heuristic take two args, a state, and prob. manhattanHeuristic

https://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html

alter the initial push into passing through the heuristic

prio queue push ( self item and prio) prio would be the heuristic value	

A* Search will take the combind sum of both cost of action and heuristic cost from successor nodses


python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic

error 1 it seems that the issue is with the exxpansion of the nodes.

maybe just add an edge case that will fully explore the cheaper nodes or the other branch of nodes.

Q5

make sure to add children to your successors list with a cost of 1

state[0] returns current position in xy
state[1] returns list of visited

Q6

Running into list issue because my A* uses dicitonary

Q7

For some reason is breaking on the tricky solution but passes everything else

its going to an infinite loop


Q8

use bfs for closest dot

for goal state need to return x y of food

need to return as list?

SOURCE: Geeks websites and slides/ files section. And Piazza (I know python from previous classes)









